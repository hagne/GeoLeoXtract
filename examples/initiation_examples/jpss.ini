[system]
#number of cpus:
runtype = generic
cpus = 2
#testrun = True # will only test the argument parsing and init reading
#testrun = workplan # will return a the workplan only but not the process it. Note, generating the workplan for an extended time range can take a long time (this is aws fault! Not mine :-) ... i think))
#verbose

[file_io]
path2processed =  /nfs/stu3data2/Satellite_data/jpss/{satellite}/{product}_projected2surfrad/
file_prefix = projected2surfrad
#path2processed =  /nfs/stu3data2/Satellite_data/goes/{satellite}/ABI_L2_{product}_projected2pnnl/
#file_prefix = ABI_L2_{product}_projected2pnnl

[locations]
# These are the locations for which model values are extracted.
# Example:
# TBL = 'name': 'Table Mountain (CO)', 'lat': 40.12498, 'lon': -105.2368
network = surfrad
# PNNL = 'name': 'Pacific Northwest National Laboratory', 'lat': 46.341, 'lon': -119.279, 'alt': 127

[products]
satellite = NOAA_20 # SNPP
# products separeted by comma: AOD
products = AOD

[workplan]
# Things like time interval, 
# example
start =   2022-11-07 00:00:00
end =     2023-08-01 00:00:00
# range: last xy days, all_time
#range = last 90 days
#range = all_time

[concatenate]
## if concatenation is desired at the end of finishing the projection
## currently a foulder on the same level as the path2processed will be generated with an _concat at the end.
## concatenation rule [daily] ... i don't think there is another option right now
concatenate = yearly
skip_last                       # Highly recommended! This prevents the generation of incomplete concat files; in case this scrape job is done on a regular basis.
overwrite_current               # This will keep overwriting the current concat file, e.g. If yearly, until the end of this year this years file will be overwritten.only if not skip_last.

